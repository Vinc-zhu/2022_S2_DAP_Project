# test
ggplot(data_death_clean_state, aes(death_rate, death_rate, group = state_name)) +
geom_line() +
facet_wrap(. ~ state_name)
data_death_clean
# test
ggplot(data_death_clean, aes(average_deaths_per_year, age_adjusted_death_rate, group = state_name)) +
geom_line() +
facet_wrap(. ~ state_name)
prop.table(table(data_death_clean$state_name))
data_death_clean %>% ggplot(aes(state_name, fill = state_name)) +
geom_bar(show.legend = F)
data_death_clean %>% ggplot(aes(state_name, fill = state_name)) +
geom_bar(show.legend = T)
rm(list=ls()) # delete all the objects in your environment
knitr::opts_chunk$set(echo = TRUE)
# Installing libraries
# install.packages("naniar")
library(tidyverse)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(janitor) # to clean column names
library(psych)   # for the describe function
library("stringr") # to add leading zeros
library(naniar) # to check missing values
knitr::opts_chunk$set(echo = TRUE)
# Installing libraries
# install.packages("naniar")
library(tidyverse)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(janitor) # to clean column names
library(psych)   # for the describe function
library("stringr") # to add leading zeros
library(naniar) # to check missing values
data_death      <- read_csv("Data/death.csv")
data_health_ins <- read_csv("Data/healthinsurance.csv")
data_incidence  <- read_csv("Data/incidence.csv")
data_income     <- read_csv("Data/income.csv")
data_population <- read_csv("Data/population.csv")
data_poverty    <- read_csv("Data/poverty.csv")
data_death_clean      <- clean_names(data_death)
data_health_ins_clean <- clean_names(data_health_ins)
data_incidence_clean  <- clean_names(data_incidence)
data_income_clean     <- clean_names(data_income)
data_population_clean <- clean_names(data_population)
data_poverty_clean    <- clean_names(data_poverty)
names(data_death_clean)
names(data_health_ins_clean)
names(data_incidence_clean)
names(data_income_clean)
names(data_population_clean)
names(data_poverty_clean)
# Overall checks
head(data_death_clean) # "Age-Adjusted Death Rate" and “Average Deaths per Year” are character
head(data_health_ins_clean)
head(data_incidence_clean) # "Age-Adjusted Incidence Rate - cases per 100,000" and “Average Annual Count” are character
head(data_income_clean)
head(data_population_clean)
head(data_poverty_clean)
summary(data_death_clean)
summary(data_health_ins_clean)
summary(data_incidence_clean)
summary(data_income_clean)
summary(data_population_clean)
summary(data_poverty_clean)
# Check duplicates
data_death_clean %>% mutate(dup = duplicated(data_death_clean)) %>% filter(dup == TRUE)
data_health_ins_clean %>% mutate(dup = duplicated(data_health_ins_clean)) %>% filter(dup == TRUE)
data_incidence_clean %>% mutate(dup = duplicated(data_incidence_clean)) %>% filter(dup == TRUE)
data_income_clean %>% mutate(dup = duplicated(data_income_clean)) %>% filter(dup == TRUE)
data_population_clean %>% mutate(dup = duplicated(data_population_clean)) %>% filter(dup == TRUE)
data_poverty_clean %>% mutate(dup = duplicated(data_poverty_clean)) %>% filter(dup == TRUE)
data_death_clean
data_incidence_clean
# Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
data_death_clean2
data_death_clean
data_death_clean2
data_incidence_clean2 <- data_incidence_clean %>%
mutate(age_adjusted_incidence_rate_cases_per_100_000=as.double(age_adjusted_incidence_rate_cases_per_100_000)) %>%
mutate(average_annual_count=as.double(average_annual_count))
data_incidence_clean2
data_death$age_adjusted_death_rate <- as.double(age_adjusted_death_rate)
data_death_clean$age_adjusted_death_rate <- as.double(age_adjusted_death_rate)
data_death_clean
data_death_clean$age_adjusted_death_rate <- as.double(age_adjusted_death_rate)
data_death_clean
data_death_clean$age_adjusted_death_rate <- as.double(data_death_clean$age_adjusted_death_rate)
data_death_clean
# Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
data_death_clean
data_death_clean2
# [Death] Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
# [Incidence] Convert the data type from character to numeric
data_incidence_clean2 <- data_incidence_clean %>%
mutate(age_adjusted_incidence_rate_cases_per_100_000=as.double(age_adjusted_incidence_rate_cases_per_100_000)) %>%
mutate(average_annual_count=as.double(average_annual_count))
data_death_clean2
data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
data_death_clean  %>% filter(fips = 2280)
data_death_clean  %>% filter(fips == 2280)
data_death_clean2 %>% filter(is.na(average_deaths_per_year))
data_death_clean3 <- data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
data_death_clean3
data_death_clean3$average_deaths_per_year
unique(data_death_clean3$average_deaths_per_year)
data_death_clean3
data_death_clean3 <- data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
data_death_clean2 %>% filter(is.na(age_adjusted_death_rate) %>%
data_death_clean2 %>% filter(is.na(age_adjusted_death_rate) %>% unique(data_death_clean3$average_deaths_per_year)
data_death_clean2 %>% filter(is.na(age_adjusted_death_rate) %>% unique(average_deaths_per_year)
View(data_death_clean2)
data_death_clean2
data_death_clean2 %>% filter(is.na(age_adjusted_death_rate) %>% unique(average_deaths_per_year)
data_death_clean3
data_death_clean3
unique(data_death_clean3$average_deaths_per_year)
data_death_clean3 <- data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
unique(data_death_clean3$average_deaths_per_year)
data_death_clean3 <- data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
data_death_clean3
data_death_clean3
dim(data_death_clean3)
nrow(data_death_clean3)
print(nrow(data_death_clean3)
print(nrow(data_death_clean3))
print(nrow(data_death_clean3))
print("there is " + nrow(data_death_clean3))
print("there is " + str(nrow(data_death_clean3)))
print("there is " & str(nrow(data_death_clean3)))
print("there is " & nrow(data_death_clean3))
nrow(data_death_clean3))
nrow(data_death_clean3)
data_death_na <- data_death_clean2 %>% filter(is.na(age_adjusted_death_rate))
nrow(data_death_na) # 331 missing values
unique(data_death_na$average_deaths_per_year)
data_death_na <- data_death_clean2 %>% filter(is.na(average_deaths_per_year))
nrow(data_death_na) # 331 missing values for "age_adjusted_death_rate"
# [Death] Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
data_incidence_na <- data_incidence_clean2 %>% filter(is.na(age_adjusted_incidence_rate_cases_per_100_000))
nrow(data_death_na) # 331 missing values for "age_adjusted_death_rate"
data_incidence_na <- data_incidence_clean2 %>% filter(is.na(average_annual_count))
nrow(data_death_na) # 331 missing values for "average_deaths_per_year"
data_incidence_na <- data_incidence_clean2 %>% filter(is.na(age_adjusted_incidence_rate_cases_per_100_000))
nrow(data_incidence_na) # 331 missing values for "age_adjusted_death_rate"
data_incidence_na <- data_incidence_clean2 %>% filter(is.na(average_annual_count))
nrow(data_incidence_na) # 331 missing values for "average_deaths_per_year"
data_incidence_clean
nrow(data_incidence_na) # 331 missing values for "age_adjusted_death_rate"
data_incidence_na <- data_incidence_clean2 %>% filter(is.na(age_adjusted_incidence_rate_cases_per_100_000))
nrow(data_incidence_na) # 331 missing values for "age_adjusted_death_rate"
miss_var_summary(data_death_clean2)
miss_var_summary(data_death_clean)
miss_var_summary(data_death_clean)
miss_var_summary(data_death_clean)
miss_var_summary(data_death_clean2)
miss_var_summary(data_incidence_clean)
miss_var_summary(data_incidence_clean2)
miss_var_summary(data_incidence_clean)
miss_var_summary(data_incidence_clean2)
miss_var_summary(data_incidence_clean)
miss_var_summary(data_incidence_clean2)
# [Death] Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
miss_var_summary(data_death_clean)
miss_var_summary(data_death_clean2)
# 331 suppressed values "*" are automatically converted to NA by coercion
# [Incidence] Convert the data type from character to numeric
data_incidence_clean2 <- data_incidence_clean %>%
mutate(age_adjusted_incidence_rate_cases_per_100_000=as.double(age_adjusted_incidence_rate_cases_per_100_000)) %>%
mutate(average_annual_count=as.double(average_annual_count))
miss_var_summary(data_incidence_clean)
miss_var_summary(data_incidence_clean2)
# 442 suppressed values "*" are automatically converted to NA by coercion
# Separate state names from county
data_death_state <- data_death_clean2 %>% separate(county, c("county_name","state_name"), ", ")
# Missing pieces filled with `NA` in 2 rows, check
data_death_state %>% filter(is.na(county_name))
data_death_state %>% filter(is.na(state_name)) # one is US, the other is DC
data_death_state1 <- data_death_state %>% mutate(state_name  = ifelse(county_name == "District of Columbia (State)", "DC", state_name))
data_death_state2 <- data_death_state1 %>% mutate(state_name  = ifelse(county_name == "United States", "US", state_name))
data_death_state2 %>% filter(is.na(state_name)) # no more missing values
# Check the number of the distinct states
n_distinct(data_death_state2$state_name) # Unique number of states is 54. Based on the domain knowledge, the United States is made up of a total of 50 states, plus the District of Columbia.
# Check the list of states
unique(data_death_state2$state_name) # "Arizona<sup>3</sup>" and "Alaska<sup>3</sup>" are errors
data_death_state3 <- data_death_state2 %>% mutate(state_name = ifelse(state_name == "Alaska<sup>3</sup>", "Alaska", state_name))
data_death_state4 <- data_death_state3 %>% mutate(state_name = ifelse(state_name == "Arizona<sup>3</sup>", "Arizona", state_name))
# Check the number of the distinct states
n_distinct(data_death_state4$state_name) # 52 = 50 states + 1 federal district + US as a whole
unique(data_death_state4$state_name)
data_death_state
# Missing pieces filled with `NA` in 2 rows, check
data_death_state %>% filter(is.na(county_name))
# Separate state names from county
data_death_state <- data_death_clean2 %>% separate(county, c("county_name","state_name"), ", ")
# Missing pieces are autimatically filled with `NA` in 2 rows, needs to check
data_death_state %>% filter(is.na(county_name))
data_death_state %>% filter(is.na(state_name)) # one is US, the other is DC
miss_var_summary(data_death_state)
# Missing pieces are autimatically filled with `NA` in 2 rows, needs to check
data_death_state %>% filter(is.na(county_name))
# Missing pieces are autimatically filled with `NA` in 2 rows, needs to check
data_death_state %>% filter(is.na(county_name))
data_death_state %>% filter(is.na(state_name)) # one is US, the other is DC
data_death_state %>% filter(is.na(state_name))  # one is US, the other is DC
data_death_state1
data_death_state2
data_death_state2 %>% filter(is.na(state_name)) # no more missing values
miss_var_summary(data_death_state2)
# Check the number of the distinct states
n_distinct(data_death_state2$state_name) # Unique number of states is 54. Based on the domain knowledge, the United States is made up of a total of 50 states, plus the District of Columbia.
# Check the list of states
unique(data_death_state2$state_name) # "Arizona<sup>3</sup>" and "Alaska<sup>3</sup>" are errors
# Check the list of states
unique(data_death_state2$state_name) # "Arizona<sup>3</sup>" and "Alaska<sup>3</sup>" appear to be errors
t
data_death_state3
# Check the number of the distinct states
n_distinct(data_death_state4$state_name) # 52 = 50 states + 1 federal district + US as a whole
unique(data_death_state4$state_name)
data_health_ins_clean
# [health insurance] Check if Non-institutionalized Population (hi_001) = Non-institutionalized Population_male (hi_002) + Non-institutionalized Population female (hi_030)
data_health_ins_clean %>%
mutate(check = hi_001 - hi_002 - hi_030) %>%
summarise(check, group = state)
# [health insurance] Check if Non-institutionalized Population (hi_001) = Non-institutionalized Population_male (hi_002) + Non-institutionalized Population female (hi_030)
data_health_ins_clean %>%
mutate(check = hi_001 - hi_002 - hi_030) %>%
summarise(check, group_by = state)
# [health insurance] Check if Non-institutionalized Population (hi_001) = Non-institutionalized Population_male (hi_002) + Non-institutionalized Population female (hi_030)
data_health_ins_clean %>%
mutate(check = hi_001 - hi_002 - hi_030) %>%
group_by(state) %>%
summarise(check, group_by = state)
# [health insurance] Check if Non-institutionalized Population (hi_001) = Non-institutionalized Population_male (hi_002) + Non-institutionalized Population female (hi_030)
data_health_ins_clean %>%
mutate(check = hi_001 - hi_002 - hi_030) %>%
group_by(state) %>%
summarise(sum(check))
data_population_clean
data_population_clean
# Check the total population at mid-year 2015 on a national level.
sum(data_population_clean&popestimate2015)
data_population_clean
# Check the total population at mid-year 2015 on a national level.
sum(data_population_clean&popestimate2015)
data_population_clean
data_population_clean&popestimate2015
# Check the total population at mid-year 2015 on a national level.
sum(data_population_clean$popestimate2015)
# Check the total population at mid-year 2015 on a national level.
sum(data_population_clean$popestimate2015)/10**6
# Reduce the entire population data by half to make it more consistent with the real world.
data_population_clean_half = data_population_clean / 2
data_population_clean
# Reduce the entire population data by half to make it more consistent with the real world.
data_population_clean_half <-  data_population_clean / 2
# Reduce the entire population data by half to make it more consistent with the real world.
data_population_clean_half <-  data_population_clean %>% mutate(popestimate2015 = popestimate2015/2)
data_population_clean_half
sum(data_population_clean_half$popestimate2015)/10**6 # 642 million
# This can be verified by the death dataset
data_death_state4
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / age_adjusted_death_rate)
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / age_adjusted_death_rate) %>%
filter(state_name == "US")
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / age_adjusted_death_rate) %>%
filter(state_name == "US") %>%
pull(population)
data_death_state4 %>%
mutate(population = average_deaths_per_year / age_adjusted_death_rate) %>%
filter(state_name == "US")
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / (age_adjusted_death_rate/100000)) %>%
filter(state_name == "US") %>%
pull(population)
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / (age_adjusted_death_rate/100000)) %>%
filter(state_name == "US") %>%
pull(population)/10**6
data_income_clean
data_income_clean %>% mutate(across(everything(), function(x){ifelse(x == ".", NA, x)}))
miss_var_summary(data_income_clean)
data_income_clean_NA <- data_income_clean %>% mutate(across(everything(), function(x){ifelse(x == ".", NA, x)}))
miss_var_summary(data_income_clean_NA)
miss_var_summary(data_income_clean)
data_income_clean_NA <- data_income_clean %>% mutate(across(everything(), function(x){ifelse(x == ".", NA, x)}))
miss_var_summary(data_income_clean_NA)
# There are invalid entries (".") in the income dataset. Convert them to NA.
miss_var_summary(data_income_clean)
# There are invalid entries (".") in the income dataset. Convert them to NA.
describe(data_income_clean)
# There are invalid entries (".") in the income dataset. Convert them to NA.
summary(data_income_clean)
data_income_clean
data_income_clean
# [Income] Convert the data type from character to numeric
names(data_income_clean)
data_income_clean
data_income_clean$income_b_001 <- as.double(data_income_clean$income_b_001)
data_income_clean
data_income_clean$income_b_001 <- as.double(data_income_clean$income_b_001)
data_income_clean$income_c_001 <- as.double(data_income_clean$income_c_001)
data_income_clean$income_d_001 <- as.double(data_income_clean$income_d_001)
data_income_clean$income_e_001 <- as.double(data_income_clean$income_e_001)
data_income_clean$income_f_001 <- as.double(data_income_clean$income_f_001)
data_income_clean$income_g_001 <- as.double(data_income_clean$income_g_001)
data_income_clean$income_h_001 <- as.double(data_income_clean$income_h_001)
data_income_clean$income_i_001 <- as.double(data_income_clean$income_i_001)
data_income_clean
miss_var_summary(data_income_clean)
data_income_clean
# There are invalid entries (".") in the income dataset. Convert them to NA.
summary(data_income_clean)
# There are invalid entries (".") in the income dataset. Convert them to NA.
summary(data_poverty_clean)
data_poverty_clean %>%
mutate(check = poverty_002 - poverty_003 - poverty_017) %>%
group_by(state) %>%
summarise(sum(check))
# Check if:
# 1) below poverty level population (poverty_002) = below poverty level male (poverty_003) + below poverty level female (poverty_017)
data_poverty_clean %>%
mutate(check = poverty_002 - poverty_003 - poverty_018) %>%
group_by(state) %>%
summarise(sum(check))
7
# 2) above poverty level population (poverty_031) = above poverty level male (poverty_032) + above poverty level female (poverty_046)
data_poverty_clean %>%
mutate(check = poverty_031 - poverty_032 - poverty_046) %>%
group_by(state) %>%
summarise(sum(check))
# 3) Population For Whom Poverty Status Is Determined (poverty_001) = below poverty level population (poverty_002) + above poverty level population (poverty_031)
data_poverty_clean %>%
mutate(check = poverty_001 - poverty_002 - poverty_031) %>%
group_by(state) %>%
summarise(sum(check))
# 3) Population For Whom Poverty Status Is Determined (poverty_001) = below poverty level population (poverty_002) + above poverty level population (poverty_031)
data_poverty_clean %>%
mutate(check = poverty_001 - poverty_002 ) %>%
group_by(state) %>%
summarise(sum(check))
- poverty_031
# 3) Population For Whom Poverty Status Is Determined (poverty_001) = below poverty level population (poverty_002) + above poverty level population (poverty_031)
data_poverty_clean %>%
mutate(check = poverty_001 - poverty_002 - poverty_031) %>%
group_by(state) %>%
summarise(sum(check))
rm(list=ls()) # delete all the objects in your environment
knitr::opts_chunk$set(echo = TRUE)
# Installing libraries
# install.packages("naniar")
library(tidyverse)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(janitor) # to clean column names
library(psych)   # for the describe function
library("stringr") # to add leading zeros
library(naniar) # to check missing values
data_death      <- read_csv("Data/death.csv")
data_health_ins <- read_csv("Data/healthinsurance.csv")
data_incidence  <- read_csv("Data/incidence.csv")
data_income     <- read_csv("Data/income.csv")
data_population <- read_csv("Data/population.csv")
data_poverty    <- read_csv("Data/poverty.csv")
data_death_clean      <- clean_names(data_death)
data_health_ins_clean <- clean_names(data_health_ins)
data_incidence_clean  <- clean_names(data_incidence)
data_income_clean     <- clean_names(data_income)
data_population_clean <- clean_names(data_population)
data_poverty_clean    <- clean_names(data_poverty)
names(data_death_clean)
names(data_health_ins_clean)
names(data_incidence_clean)
names(data_income_clean)
names(data_population_clean)
names(data_poverty_clean)
# Overall checks
head(data_death_clean) # "age_adjusted_death_rate" and “average_deaths_per_year” are character
head(data_health_ins_clean)
head(data_incidence_clean) # "age_adjusted_incidence_rate_cases_per_100_000" and “average_annual_count” are character
head(data_income_clean)
head(data_population_clean)
head(data_poverty_clean)
summary(data_death_clean)
summary(data_health_ins_clean)
summary(data_incidence_clean)
summary(data_income_clean)
summary(data_population_clean)
summary(data_poverty_clean)
# Check duplicates
data_death_clean %>% mutate(dup = duplicated(data_death_clean)) %>% filter(dup == TRUE)
data_health_ins_clean %>% mutate(dup = duplicated(data_health_ins_clean)) %>% filter(dup == TRUE)
data_incidence_clean %>% mutate(dup = duplicated(data_incidence_clean)) %>% filter(dup == TRUE)
data_income_clean %>% mutate(dup = duplicated(data_income_clean)) %>% filter(dup == TRUE)
data_population_clean %>% mutate(dup = duplicated(data_population_clean)) %>% filter(dup == TRUE)
data_poverty_clean %>% mutate(dup = duplicated(data_poverty_clean)) %>% filter(dup == TRUE)
# No duplicates for all datasets
# [Death] Convert the data type from character to numeric
data_death_clean2 <- data_death_clean %>%
mutate(age_adjusted_death_rate=as.double(age_adjusted_death_rate)) %>%
mutate(average_deaths_per_year=as.double(average_deaths_per_year))
miss_var_summary(data_death_clean)
miss_var_summary(data_death_clean2)
# 331 suppressed values "*" are automatically converted to NA by coercion
# [Incidence] Convert the data type from character to numeric
data_incidence_clean2 <- data_incidence_clean %>%
mutate(age_adjusted_incidence_rate_cases_per_100_000=as.double(age_adjusted_incidence_rate_cases_per_100_000)) %>%
mutate(average_annual_count=as.double(average_annual_count))
miss_var_summary(data_incidence_clean)
miss_var_summary(data_incidence_clean2)
# 442 suppressed values "*" are automatically converted to NA by coercion
# [Income] Convert the data type from character to numeric
summary(data_income_clean)
data_income_clean$income_b_001 <- as.double(data_income_clean$income_b_001)
data_income_clean$income_c_001 <- as.double(data_income_clean$income_c_001)
data_income_clean$income_d_001 <- as.double(data_income_clean$income_d_001)
data_income_clean$income_e_001 <- as.double(data_income_clean$income_e_001)
data_income_clean$income_f_001 <- as.double(data_income_clean$income_f_001)
data_income_clean$income_g_001 <- as.double(data_income_clean$income_g_001)
data_income_clean$income_h_001 <- as.double(data_income_clean$income_h_001)
data_income_clean$income_i_001 <- as.double(data_income_clean$income_i_001)
data_income_clean
# Separate state names from county
data_death_state <- data_death_clean2 %>% separate(county, c("county_name","state_name"), ", ")
# Missing pieces are autimatically filled with `NA` in 2 rows, needs to check
data_death_state %>% filter(is.na(county_name)) # no "NA"
data_death_state %>% filter(is.na(state_name))  # one is United States, the other is District of Columbia (State) (DC)
data_death_state1 <- data_death_state %>% mutate(state_name  = ifelse(county_name == "District of Columbia (State)", "DC", state_name))
data_death_state2 <- data_death_state1 %>% mutate(state_name  = ifelse(county_name == "United States", "US", state_name))
data_death_state2 %>% filter(is.na(state_name)) # no more missing values in state_name
# Check the number of the distinct states
n_distinct(data_death_state2$state_name) # Unique number of states is 54. Based on the domain knowledge, the United States is made up of a total of 50 states, plus the District of Columbia.
# Check the list of states
unique(data_death_state2$state_name) # "Arizona<sup>3</sup>" and "Alaska<sup>3</sup>" appear to be errors
data_death_state3 <- data_death_state2 %>% mutate(state_name = ifelse(state_name == "Alaska<sup>3</sup>", "Alaska", state_name))
data_death_state4 <- data_death_state3 %>% mutate(state_name = ifelse(state_name == "Arizona<sup>3</sup>", "Arizona", state_name))
# Check the number of the distinct states again
n_distinct(data_death_state4$state_name) # 52 = 50 states + 1 federal district + US as a whole
unique(data_death_state4$state_name) # looks alright
# Check if Non-institutionalized Population (hi_001) = Non-institutionalized Population_male (hi_002) + Non-institutionalized Population female (hi_030)
data_health_ins_clean %>%
mutate(check = hi_001 - hi_002 - hi_030) %>%
group_by(state) %>%
summarise(sum(check))
# all zero, passed the check
# Check if:
# 1) below poverty level population (poverty_002) = below poverty level male (poverty_003) + below poverty level female (poverty_017)
data_poverty_clean %>%
mutate(check = poverty_002 - poverty_003 - poverty_017) %>%
group_by(state) %>%
summarise(sum(check))
# all zero, passed the check
# 2) above poverty level population (poverty_031) = above poverty level male (poverty_032) + above poverty level female (poverty_046)
data_poverty_clean %>%
mutate(check = poverty_031 - poverty_032 - poverty_046) %>%
group_by(state) %>%
summarise(sum(check))
# all zero, passed the check
# 3) Population For Whom Poverty Status Is Determined (poverty_001) = below poverty level population (poverty_002) + above poverty level population (poverty_031)
data_poverty_clean %>%
mutate(check = poverty_001 - poverty_002 - poverty_031) %>%
group_by(state) %>%
summarise(sum(check))
# all zero, passed the check
# Check the total population at mid-year 2015 on a national level.
sum(data_population_clean$popestimate2015)/10**6 # 642 million
# [Uncertainty] Based on the domain knowledge, the population of the United States should be around 320 million. It seems the number in the population dataset was doubled.
# This can be verified by the death dataset
data_death_state4 %>%
mutate(population = average_deaths_per_year / (age_adjusted_death_rate/100000)) %>%
filter(state_name == "US") %>%
pull(population)/10**6
# 329 million
# Reduce the entire population data by half to make it more consistent with the real world.
data_population_clean_half <-  data_population_clean %>% mutate(popestimate2015 = popestimate2015/2)
sum(data_population_clean_half$popestimate2015)/10**6 # 321 million
data_death_clean
prop.table(table(data_death_clean$state_name))
